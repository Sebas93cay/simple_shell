access (man 2 access)
       int access(const char *pathname, int mode);
       access() checks whether the calling process can access the file
       pathname.  If pathname is a symbolic link, it is dereferenced.
       
chdir (man 2 chdir)
close (man 2 close)
closedir (man 3 closedir)
execve (man 2 execve)
exit (man 3 exit)
     noreturn void exit(int status);
     The exit() function causes normal process termination and the
       least significant byte of status (i.e., status & 0xFF) is
       returned to the parent (see wait(2)).

_exit (man 2 _exit)
      noreturn void _exit(int status);
      _exit() terminates the calling process "immediately".  Any open
       file descriptors belonging to the process are closed.  Any
       children of the process are inherited by init(1) (or by the
       nearest "subreaper" process as defined through the use of the
       prctl(2) PR_SET_CHILD_SUBREAPER operation).  The process's parent
       is sent a SIGCHLD signal.
fflush (man 3 fflush)
fork (man 2 fork)
free (man 3 free)
getcwd (man 3 getcwd)
       These functions return a null-terminated string containing an
       absolute pathname that is the current working directory of the
       calling process.  The pathname is returned as the function result
       and via the argument buf, if present.

       The getcwd() function copies an absolute pathname of the current
       working directory to the array pointed to by buf, which is of
       length size.

getline (man 3 getline)
getpid (man 2 getpid)
isatty (man 3 isatty)
       The isatty() function tests whether fd is an open file descriptor
       referring to a terminal.
       
kill (man 2 kill)
     int kill(pid_t pid, int sig);
     The kill() system call can be used to send any signal to any
       process group or process.
     On success (at least one signal was sent), zero is returned.  On
       error, -1 is returned, and errno is set to indicate the error.
       
malloc (man 3 malloc)
open (man 2 open)
opendir (man 3 opendir)
	DIR *opendir(const char *name);
	The opendir() function opens a directory stream corresponding to
       the directory name, and returns a pointer to the directory
       stream.  The stream is positioned at the first entry in the
       directory.
       
perror (man 3 perror)
       The perror() function produces a message on standard error
       describing the last error encountered during a call to a system
       or library function.
       
read (man 2 read)
readdir (man 3 readdir)
	The readdir() function returns a pointer to a dirent structure
       representing the next directory entry in the directory stream
       pointed to by dirp.  It returns NULL on reaching the end of the
       directory stream or if an error occurred.
       
signal (man 2 signal)
       sighandler_t signal(int signum, sighandler_t handler);
       signal() sets the disposition of the signal signum to handler,
       which is either SIG_IGN, SIG_DFL, or the address of a programmer-
       defined function (a "signal handler").
       
stat (__xstat) (man 2 stat)
     int stat(const char *path, struct stat *buf);
     stat() stats the file pointed to by path and fills in buf.
     
lstat (__lxstat) (man 2 lstat)
      int fstat(int fd, struct stat *buf);
      lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to.
      
fstat (__fxstat) (man 2 fstat)
      int lstat(const char *path, struct stat *buf);
      fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.
      
strtok (man 3 strtok)
       The strtok() function breaks a string into a sequence of zero or
       more nonempty tokens.  On the first call to strtok(), the string
       to be parsed should be specified in str.  In each subsequent call
       that should parse the same string, str must be NULL.
       
wait (man 2 wait)
     pid_t wait(int *wstatus);
     The wait() system call suspends execution of the calling thread
       until one of its children terminates.  The call wait(&wstatus) is
       equivalent to:
           waitpid(-1, &wstatus, 0);
	   
waitpid (man 2 waitpid)
	pid_t waitpid(pid_t pid, int *wstatus, int options);
	The waitpid() system call suspends execution of the calling
       thread until a child specified by pid argument has changed state.
       
wait3 (man 2 wait3)
wait4 (man 2 wait4)
write (man 2 write)